	// Change Program
	// Author: Richard DeSilvey
	// Demonstrates the 'round' function
	// to help fix floating point errors.
	
	change = 0;
	// Functions can be assigned to other functions
	func funcPointer(denom).
	
	func main (price, amt)
	
		change = amt - price;
		round change, 2;
		
		chg = change;
		
		twenties = ->funcPointer(20);
		
		funcPointer = getChange;
		
		twenties	= ->funcPointer(20);
		tens 		= ->getChange(10);
		fives 		= ->getChange(5);
		ones	 	= ->getChange(1);
		quarters 	= ->getChange_recur(0.25, 0);
		dimes 		= ->getChange(0.1);
		nickels 	= ->getChange(0.05);
		pennies 	= ->getChange(0.01);
		
		print
		"\nChange Due: 	", chg, 	"\n",
		"----------------------------\n",
		"Twenties:	", twenties, 	"\n",
		"Tens:		", tens, 		"\n",
		"Fives:		", fives, 		"\n",
		"Ones:		", ones, 		"\n",
		"Quarters:	", quarters, 	"\n",
		"Dimes:		", dimes, 		"\n",
		"Nickels:	", nickels, 	"\n",
		"Pennies:	", pennies, 	"\n\n";
	.
	
	// With recursion
	func getChange_recur (denom, qty)
		if (change >= denom) then
			change = change - denom;
			round change, 2;
			return ->getChange_recur(denom, qty + 1);
		else
			return qty;
		fi
	.
	
	// With a loop
	func getChange (denom)
		qty = 0;
		loop q:
		
			if (change >= denom) then
				change = change - denom;
				qty = qty + 1;
				round change, 2;
			else
				break
			fi
		
		repeat
		return qty;
	.
	
.