
	// Rowdy demo

	func func1(). // Define this as a function
	func func2(a, b)
	  print "Function adds ", a, " and ", b, " to get: ", a + b, "\n";
	.
	
	func main()
		print (->myfunc(1, 3)), "\n";
		nullValue = ->noReturn();
		print nullValue, "\n";
		
		func1 = func2;
		
		->func2(2, 8);
		count = 1;
		// Strings, print statements have concat built into them, so it's not always 
		// needed and may be more efficient to not use concat statements inside print statements
		print ( concat "These are ", "Concatenated ", count ), "\n";
		count = count + 1;
		print "These are ", ( concat "Concatenated ", count, "\n");
		count = count + 1;
		print "These are ", "Concatenated ", count, "\n";
		count = count + 1;
		// Above same as below
		print ( concat "These are ", "Concatenated ", count, "\n" );
		
		str1 = "Hello ";
		str2 = "World!\n";
		
		str3 = concat str1, str2;
		print str3;
		
		// Slicing Strings
		str4 = slice str3, 0, 5; // [0, 5)
		print ( concat str4, "\n" );
		v1 = 0; v2 = 5;
		
		str4 = slice str3, v1, v2; // [0, 5)
		print ( concat str4, " World!" ), "\n";
		->noReturn();
	.
	
	func noReturn ()
	  // do something then don't return anything
	.
	
	func myfunc(a, b)
		return a + b;
	.
	
.