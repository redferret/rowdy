
	// Rowdy demo

	func func2(a, b) {
	  print "Function adds ", a, " and ", b, " to get: ", a + b, "\n";
	}
	
	func main() {
		print (->myfunc(1, 3)), "\n";
		nullValue = ->noReturn();
		print nullValue, "\n";
		
		func1 = func2;
		
		->func1(2, 8);
		count = 1;
		// Strings, print statements have concat built into them, so it's not always 
		// needed and may be more efficient to not use concat statements inside print statements
		print ( concat "These are ", "Concatenated ", count ), "\n";
		count = count + 1;
		print "These are ", ( concat "Concatenated ", count, "\n");
		count = count + 1;
		print "These are ", "Concatenated ", count, "\n";
		count = count + 1;
		// Above same as below
		print ( concat "These are ", "Concatenated ", count, "\n" );
		
		str1 = "Hello ";
		str2 = "World!\n";
		
		str3 = concat str1, str2;
		print str3;
		
		// Slicing Strings
		str4 = slice str3, 0, 5; // [0, 5)
		print ( concat str4, "\n" );
		v1 = 0; v2 = 5;
		
		str4 = slice str3, v1, v2; // [0, 5)
		print ( concat str4, " World!" ), "\n";
		
		print slice ( slice "This will be cut into pieces", 0, 16), 5, 16, "\n";
		print ( strcmp "AAA", "AAA"), "\n";
		print (( ( strcmp "AAA", "AAA") == 0 ) ), "\n";
		print "STRCMP: ", ( ( strcmp "AAA", "AAA") == 0), "\n";
		
		->numberProgram();
		->vars();
		
		const C = 1000;
		C = func(){}; // should throw an exception
		
	}
	
	// vars will print the following:
	// 12
	// 100
	// 12
	func vars() {
		print "Variables\n";
		->f2();
	}
	func f1(v1) {
		v1 = 100;
		print v1, "\n"; // 100
	}
	func f2() {
		v1 = 12;
		print v1, "\n"; // 12
		->f1(v1);
		print v1, "\n"; // Still 12
	}

	func noReturn () {
	  // do something then don't return anything
	}
	
	func myfunc(a, b) {
		return a + b;
	}
	
	func numberProgram() {
		print 1 + 4 ^ (5 - 2), "\n"; // Evaluates to 1 + 4 ^ 3 => 1 + 64 => 65.0
		print (1 + 4) ^ (5 - 2), "\n"; // Evaluates to 5 ^ 3 => 125.0
		print 5 % 10 + 1, "\n"; // Evaluates to 6
		
		f = func() {\\
			loop x: {\\
				x=x+1\\
				if x > MAX {\\
					break\\
				}else{\\
					print x, "\n"\\
				}\\
			}\\
		} \\
		loop x: {\\
			->f() \\
			break\\
		} \\
		print "Done\n"\\
		
	}
