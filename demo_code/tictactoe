
import "rowdy.core"

func main() {
	xBoard = null
	oBoard = null
	playBoard = null
	turnsTaken = 0
	winner = null
	
	print "For help, type 'help'", ln
	$showHelp
	
  xPlays = $getFirstPlayer
	$promptTurn
	
	$initGame
	$printBoard
	
	while true {
		read input
		if $equals(input, "exit") {
			break
		} else if $equals(input, "help") {
			$showHelp
		} else if $equals(input, "reset") {
			$initGame
			$printBoard
			$promptTurn
		} else if $isNumber(input){
			$makeMove
		} else {
			print "Invalid input", ln
		}
		
	}
	
}

func showHelp() {
	print "Type 'reset' to start a new game", ln
	print "To make a move, enter the index of the cell. To exit, type 'exit'", ln
}

dynamic func makeMove() <xPos, yPos, board, space, role> {
	index = input as int
	if (index >= 0 and index <= 8) {
		xPos = (index / 3) as int
		yPos = (index % 3) as int
		
		if xPlays {
			board = xBoard
			role = "X"
		} else {
			board = oBoard
			role = "O"
		}
		
		space = playBoard[index]
		if (board[xPos][yPos] == 1) or ($equals(space, "X") or $equals(space, "O")) {
			print "Space is taken!", ln
			$printBoard
		} else {
			board[xPos][yPos] = 1
			turnsTaken++
			
			playBoard[index] = role
			
			$checkForWinOrTie
			
			$printBoard
			xPlays = $not(xPlays)
			$promptTurn
		}
	} else {
		print "Invalid index, try again", ln
	}
}

dynamic func checkForWinOrTie() <count>{
	if (turnsTaken >= 9) {
		winner = "TIE"
		return
	}

	count = 0
	
	$forLoop(0, 3, 1, func(x) {
		$forLoop(0, 3, 1, func(y) {
			if (board[x][y] == 1) {
				count++
			}
		})
		
		if (count == 3) {
			winner = role
			return true
		}
		count = 0
	})
	
	if (winner != null) {
		return
	}
	
	$forLoop(0, 3, 1, func(y) {
		$forLoop(0, 3, 1, func(x) {
			if (board[x][y] == 1) {
				count++
			}
		})
		if (count == 3) {
			winner = role
			return true
		}
		count = 0
	})
	
	if (winner != null) {
		return
	}
	
	$forLoop(0, 3, 1, func(x) {
		if (board[x][x] == 1) {
			count++
		}
	})
	if (count == 3) {
		winner = role
		return
	}
	
	count = 0
	
	$forLoop(2, 0, -1, func(x) {
		if (board[2 - x][x] == 1) {
			count++
		}
		
		if (count == 3) {
			winner = role
			return true
		}
	})
}

dynamic func printBoard() {
	print ln
	print " ", playBoard[0]," | ",playBoard[1], " | ",playBoard[2], "	", " 0 | 1 | 2 ", ln
	print " ----------	 ----------", ln
	print " ", playBoard[3]," | ",playBoard[4], " | ",playBoard[5], "	", " 3 | 4 | 5 ", ln
	print " ----------	 ----------", ln
	print " ", playBoard[6]," | ",playBoard[7], " | ",playBoard[8], "	", " 6 | 7 | 8 ", ln
}

dynamic func promptTurn() {
	if (winner != null) {
		print "The winner is ", winner, "!", ln
		$initGame
		$printBoard
	} else {
		print ln
	}
	if xPlays {
		print "X Goes", ln
	} else {
		print "O Goes", ln
	}
}
func getFirstPlayer() {
	return ($rand() * 2 as int) == 0
}

dynamic func initGame() {
	turnsTaken = 0
	xCount = 0
	oCount = 0
	winner = null
	playBoard = new [" ", " ", " ", " ", " ", " ", " ", " ", " "]
	xBoard = new [ new [0, 0, 0], new [0, 0, 0], new [0, 0, 0]]
	oBoard = new [ new [0, 0, 0], new [0, 0, 0], new [0, 0, 0]]
}