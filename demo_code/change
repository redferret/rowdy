	// Change Program
	// Author: Richard DeSilvey
	// Demonstrates the 'round' function to help fix floating point errors
	// and recursion.
	
	change = 0;
	
	func main (price, amt) {
	
		change = amt - price;
		round change, 2;
		
		chg = change;
		
		twenties	= ->getChange(20);
		tens 		= ->getChange(10);
		fives 		= ->getChange(5);
		ones	 	= ->getChange(1);
		quarters 	= ->getChange_recur(0.25, 0);
		dimes 		= ->getChange(0.1);
		nickels 	= ->getChange(0.05);
		pennies 	= ->getChange(0.01);
		
		print
		"Amount Due: ", price,		"\n",
		"Amount Given: ", amt,		"\n",
		"\nChange Due: 	", chg, 	"\n",
		"----------------------------\n",
		"Twenties:	", twenties, 	"\n",
		"Tens:		", tens, 		"\n",
		"Fives:		", fives, 		"\n",
		"Ones:		", ones, 		"\n",
		"Quarters:	", quarters, 	"\n",
		"Dimes:		", dimes, 		"\n",
		"Nickels:	", nickels, 	"\n",
		"Pennies:	", pennies, 	"\n\n";
	}
	
	// With recursion
	func getChange_recur (denom, qty) {
		if (change >= denom) {
			change = change - denom;
			round change, 2;
			return ->getChange_recur(denom, qty + 1);
		} else {
			return qty;
		}
	}
	
	// With a loop
	func getChange (denom) {
		loop qty: {
			if (change >= denom) {
				change = change - denom;
				qty = qty + 1;
				round change, 2;
			} else {
				return qty;
			}
		}
	}
