
import "core.lists"

const global PI = 3.141592653589793
const global NaN = 0d / 0d
const global ln = "\n"

native func runtime(function)

native func equalsIgnoreCase(str1, str2)
native func strcmp(str1, str2)
native func slice(str1, from, to)
native func DecimalFormat(pattern)
native func format(str, formatter)

native func isNumber(value)
native func cos(a)
native func sin(a)
native func tan(a)
native func rand()
native func type(var)

func isFunction(var) {
	return $equals($type(var), "rowdy.nodes.expression.AnonymousFunc")
					or $equals($type(var), "rowdy.nodes.RowdyNode")
}

func executeFunctions(funcs) {
	$forEach(funcs, func(f) {
		if $isFunction(f) {
			$f()
		}
	})
}

func max(a, b) {
	if a > b {
		return a
	} else {
		return b
	}
}

func min(a, b) {
	if a < b {
		return a
	} else {
		return b
	}
}

func degrees(rads) {
	return rads * (180 / PI)
}
func radians(degs) {
	return degs * (PI / 180)
}

func roundVal(value, p) {
  if isset p { 
		return round value, p
	} else {
		return round value, 1
	}
}

func not(bool) {
	return bool == false
}

func isString(val) {
	return $equals($type(val), "String")
}

func isEmpty(str) {
	return $equals(str, "")
}

func isNotEmpty(str) {
	return $not($equals(str, ""))
}

func equals(var1, var2) {
	return $strcmp(var1, var2) == 0
}

func notEqual(var1, var2) {
	return $strcmp(var1, var2) != 0
}