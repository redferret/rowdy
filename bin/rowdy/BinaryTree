
public class BinaryTree {

	construct(compare, value) {
		this.value = value
		this.compare = is compare ? func(parentValue, insertedValue) {
			if parentValue < insertedValue {
				return 1
			} else if parentValue > insertedValue {
				return -1
			} else {
				return 0
			}
		}
	}
	
	public:
		func insert(value) {
			if ($this.isNull()) {
				this.value = value
				return
			}
		
			direction = $this.compare(this.value, value)
			
			if (direction < 0) {
				if (this.left == null) {
					this.left = new BinaryTree(this.compare, value)
					this.left.parent = this
				} else {
					$this.left.insert(value)
				}
			} else if (direction > 0) {
				if (this.right == null) {
					this.right = new BinaryTree(this.compare, value)
					this.right.parent = this
				} else {
					$this.right.insert(value)
				}
			}
		}
		
		func remove(value) {

		}
		
		func isNull() {
			return this.value == null
		}
		
		func contains(value) {
		
			if ($this.isNull()) {
				return false
			}
		
			compareValue = $this.compare(this.value, value)
			
			if (compareValue < 0) {
				if (this.left != null) {
					return $this.left.contains(value)
				} else {
					return false
				}
			} else if (compareValue > 0) {
				if (this.right != null) {
					return $this.right.contains(value)
				} else {
					return false
				}
			} else {
				return true
			}
		}
		
		func printInOrder() {
			if (this.left != null) {
				$this.left.printInOrder()
			}
			print this.value, " "
			if (this.right != null) {
				$this.right.printInOrder()
			}
		}
		
		func printPostOrder() {
			if (this.left != null) {
				$this.left.printPostOrder()
			}
			if (this.right != null) {
				$this.right.printPostOrder()
			}
			print this.value, " "
		}
		
		func printPreOrder() {
			print this.value, " "
			if (this.left != null) {
				$this.left.printPreOrder()
			}
			if (this.right != null) {
				$this.right.printPreOrder()
			}
		}
		
	private:
		left = null
		right = null
		parent = null
		value = null
		compare = null
		balanceFactor = 0
		
		func rotateLeft(t1, t2) {
			innerChild = t2.left
			t1.right = innerChild
			if (innerChild != null) {
				innerChild.parent = t1
			}
			t2.left = t1
			t1.parent = t2
			
			if (t2.balanceFactor == 0) {
				t1.balanceFactor += 1
				t2.balanceFactor -= 1
			} else {
				t1.balanceFactor = 0
				t2.balanceFactor = 0
			}
			return t2
		}
		
		func rotateRight(t1, t2) {
			
		}
}

func main() {

	tree = new BinaryTree()
	$tree.insert(6)
	$tree.insert(1)
	$tree.insert(12)
	$tree.insert(8)
	
	print "In Order\n"
	$tree.printInOrder
	print "\nPost Order\n"
	$tree.printPostOrder
	print "\nPre Order\n"
	$tree.printPreOrder
	print "\n"
	
	print $tree.contains(8), "\n"
}