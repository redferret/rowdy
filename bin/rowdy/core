
import "rowdy.lists"

const PI = 3.141592653589793
const NaN = 0d / 0d
const ln = "\n"

// Formal: native func java(object, method, paramClasses, paramValues ... )
native func java(object, method, paramClasses)

native func runtime(function)

native func equalsIgnoreCase(str1, str2)
native func strcmp(str1, str2)
native func contains(str, substring)
native func slice(str1, from, to)

native func DecimalFormat(pattern)
native func format(str, formatter)

native func instance(nameOfClass)
native func getRowdyInstance()

native func intToChar(integer)
native func isNumber(value)
native func cos(a)
native func sin(a)
native func tan(a)
native func rand()
native func type(var)

func abs(n) {
	if n < 0 {
		return -n
	} else {
		return n
	}
}

func isFunction(var) {
	return $equals($type(var), "rowdy.nodes.expression.AnonymousFunc")
					or $equals($type(var), "rowdy.nodes.RowdyNode")
}

func max(a, b) {
	if a > b {
		return a
	} else {
		return b
	}
}

func min(a, b) {
	if a < b {
		return a
	} else {
		return b
	}
}

func degrees(rads) {
	return rads * (180 / PI)
}
func radians(degs) {
	return degs * (PI / 180)
}

func roundVal(value, precision) {
	return round value, (is precision? 1)
}

func not(bool) {
	return bool == false
}

func isString(val) {
	return $equals($type(val), "String")
}

func isEmpty(str) {
	return $equals(str, "")
}

func isNotEmpty(str) {
	return $notEqual(str, "")
}

func equals(var1, var2) {
	return $strcmp(var1, var2) == 0
}

func notEqual(var1, var2) {
	return $strcmp(var1, var2) != 0
}